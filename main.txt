package main

import (
	"Obfushop/bn256"
	"Obfushop/compile/contract"
	"Obfushop/compile/contract/Event"
	"Obfushop/crypto/AC"
	"Obfushop/crypto/AES"
	"Obfushop/crypto/Convert"
	"Obfushop/crypto/OABE"
	"Obfushop/utils"
	"context"
	"crypto/rand"
	"crypto/sha256"
	"fmt"
	"log"
	"math/big"
	"strings"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
)

func main() {
	iterations := 10000
	//=============================Contract Deploy===========================//
	contract_name := "BC_SID"
	client, err := ethclient.Dial("http://127.0.0.1:8545")
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}
	privatekey := utils.GetENV("PRIVATE_KEY_1")
	privatekeyBuyer := utils.GetENV("PRIVATE_KEY_2")
	privatekeySeller := utils.GetENV("PRIVATE_KEY_3")
	privatekeyLogistics := utils.GetENV("PRIVATE_KEY_4")
	auth := utils.Transact(client, privatekey, big.NewInt(0))
	address, tx := utils.Deploy(client, contract_name, auth)
	receipt, _ := bind.WaitMined(context.Background(), client, tx)
	if err != nil {
		log.Fatalf("Tx receipt failed: %v", err)
	}
	fmt.Printf("Deploy Gas used: %d\n", receipt.GasUsed)
	Contract, err := contract.NewContract(common.HexToAddress(address.Hex()), client)
	if err != nil {
		fmt.Println(err)
	}
	//=============================Setup Phase==============================//
	//1.Shopping-chain setup
	paramters := AC.Setup()           //Generate ACs parameters
	issuerkey := AC.KeyGen(paramters) //Generate issuer's key pair
	auth0 := utils.Transact(client, privatekey, big.NewInt(0))
	tx0, _ := Contract.UploadACsParams(auth0, Convert.G1ToG1Point(paramters.G1), Convert.G2ToG2Point(paramters.G2), Convert.G1ToG1Point(issuerkey.PK1), Convert.G1ToG1Point(issuerkey.PK2))
	receipt0, err := bind.WaitMined(context.Background(), client, tx0)
	if err != nil {
		log.Fatalf("Tx receipt failed: %v", err)
	}
	fmt.Printf("UploadIssuerKey Gas used: %d\n", receipt0.GasUsed)

	//==================================Register=====================================//
	//1.Generate user's key pair (skB, pkB), where pkB=(pkB1,pkB2)
	skB, _ := rand.Int(rand.Reader, bn256.Order)
	pkB1 := new(bn256.G1).ScalarBaseMult(skB)
	pkB2 := new(bn256.G2).ScalarBaseMult(skB)

	//fmt.Printf("pkB1 + (-pkB1) = %v\n", new(bn256.G1).Add(pkB1, new(bn256.G1).Neg(pkB1)))

	//2.User obtains his credential
	attribute := "Age>18"
	hash := sha256.Sum256([]byte(attribute))
	m := new(big.Int).SetBytes(hash[:])
	d, req := AC.PrepareBlindSign(paramters, m)
	signature := AC.BlindSign(paramters, issuerkey, req)
	cred := AC.ObtainCred(signature, d)

	//3. Generate proof of credential
	proof, _ := AC.ProveCred(paramters, skB, issuerkey, cred, m)

	//4.Construct digtal shopping identity and uploads the shopping-chain
	auth1 := utils.Transact(client, privatekeyBuyer, big.NewInt(0))
	tx1, _ := Contract.RegisterSID(auth1, Convert.G1ToG1Point(pkB1), Convert.G2ToG2Point(pkB2),
		Convert.G2ToG2Point(proof.U), Convert.G2ToG2Point(proof.S), proof.Value, attribute)
	receipt1, err := bind.WaitMined(context.Background(), client, tx1)
	if err != nil {
		log.Fatalf("Tx receipt failed: %v", err)
	}
	fmt.Printf("VerifyProof Gas used: %d\n", receipt1.GasUsed)
	SIDAttr, _ := Contract.GetSID(&bind.CallOpts{}, Convert.G1ToG1Point(pkB1))
	fmt.Printf("The SID attribute:%v\n", SIDAttr)

	//====================================Shopping=====================================//
	//1.Merchant sets productID and its price.
	productID := "Wine123"
	auth2 := utils.Transact(client, privatekeySeller, big.NewInt(0))
	tx2, _ := Contract.SetProductPrice(auth2, productID, big.NewInt(123347328473432382))
	receipt2, err := bind.WaitMined(context.Background(), client, tx2)
	if err != nil {
		log.Fatalf("Tx receipt failed: %v", err)
	}
	fmt.Printf("Merchant set the  product Gas used: %d\n", receipt2.GasUsed)
	sellerAddr := auth2.From

	//2. Buyer Obtain product price;
	price, err := Contract.GetProduct(&bind.CallOpts{}, sellerAddr, productID)
	if err != nil {
		log.Fatalf("GetProduct 调用失败: %v", err)
	}
	fmt.Printf("商品 %s 的价格为: %s gwei\n", productID, price.String())

	//3.Buyer sends a shopping order
	totalPrice := new(big.Int).Mul(price, big.NewInt(3))         // 单价 * 数量 = 总价 （单位：gWei）
	auth3 := utils.Transact(client, privatekeyBuyer, totalPrice) // ⬅️ 发送 totalPrice wei
	tx3, _ := Contract.BuyerCreateOrder(auth3, sellerAddr, productID, big.NewInt(3), Convert.G1ToG1Point(pkB1))
	receipt3, err := bind.WaitMined(context.Background(), client, tx3)
	if err != nil {
		log.Fatalf("Transaction mining failed: %v", err)
	}
	fmt.Printf("BuyerCreateOrder GasUsed = %d\n", receipt3.GasUsed)
	buyerAddr := auth3.From

	//3.Merchant comfirm a shopping order.
	//  `Merchant obtains a transaction`
	parsedABI, _ := abi.JSON(strings.NewReader(contract.ContractABI))
	header, _ := client.HeaderByNumber(context.Background(), nil)
	order, _ := Event.PollEventsBySeller(client, common.HexToAddress(address.Hex()), parsedABI, sellerAddr, header.Number.Uint64()-50) // 可监听最近50个区块

	//`Merchant comfirm the order`
	auth4 := utils.Transact(client, privatekeySeller, big.NewInt(0)) // ⬅️ 发送 totalPrice wei
	tx4, _ := Contract.SellerAcceptOrder(auth4, order[0].Buyer, order[0].OrderID, attribute)
	receipt4, err := bind.WaitMined(context.Background(), client, tx4)
	if err != nil {
		log.Fatalf("Transaction mining failed: %v", err)
	}
	fmt.Printf("SellerAcceptOrder GasUsed = %d\n", receipt4.GasUsed)

	//======================================Logistics=========================================//
	// 系统参数生成
	MSK, PK := OABE.Setup()
	//生成用户公私钥对
	sku, _ := rand.Int(rand.Reader, bn256.Order)
	pku := new(bn256.G1).ScalarMult(PK.G1, sku)

	//G1 exponential operation
	var g1Exp *bn256.G1
	var g2Exp *bn256.G2
	var gtExp *bn256.GT
	var pair *bn256.GT
	start := time.Now() // 记录开始时间
	for i := 0; i < iterations; i++ {
		g1Exp = new(bn256.G1).ScalarMult(pkB1, skB)
	}
	elapsed := time.Since(start)
	fmt.Printf("Time cost (G1): %.6f ms\n", elapsed.Seconds()*1000/float64(iterations))
	g1Exp = new(bn256.G1).Neg(g1Exp)

	//G2 exponential operation
	start = time.Now() // 记录开始时间
	for i := 0; i < iterations; i++ {
		g2Exp = new(bn256.G2).ScalarMult(pkB2, skB)
	}
	elapsed = time.Since(start)
	fmt.Printf("Time cost (G2): %.6f ms\n", elapsed.Seconds()*1000/float64(iterations))
	g2Exp = new(bn256.G2).Neg(g2Exp)

	//GT exponential operation
	start = time.Now() // 记录开始时间
	for i := 0; i < iterations; i++ {
		gtExp = new(bn256.GT).ScalarMult(PK.GT, skB)
	}
	elapsed = time.Since(start)
	fmt.Printf("Time cost (GT): %.6f ms\n", elapsed.Seconds()*1000/float64(iterations))
	gtExp = new(bn256.GT).Neg(gtExp)
	//Pairing operation
	start = time.Now() // 记录开始时间
	for i := 0; i < iterations; i++ {
		pair = bn256.Pair(pku, pkB2)
	}
	elapsed = time.Since(start)
	fmt.Printf("Time cost (Pair): %.6f ms\n", elapsed.Seconds()*1000/float64(iterations))
	gtExp = new(bn256.GT).Neg(pair)

	//1.Buyer encrypts our delivery address
	//TransAddr := "A4 Estate||A3 Road||A2 County||A1 City||A province "
	DelivAddr := []byte("5st Villa")
	keyR, _ := rand.Int(rand.Reader, bn256.Order)
	keyAES := new(bn256.GT).ScalarBaseMult(keyR)
	cipherAddr, err := AES.EncryptAndEncode(DelivAddr, keyAES.Marshal())
	if err != nil {
		log.Fatalf("加密失败: %v", err)
	}
	fmt.Println("加密后的Base64字符串:", cipherAddr)
	//加密派件地址
	tau := "(Owner  OR (Community_A AND Hovering_drone))"
	ABECT, xsMap := OABE.Encrypt(keyAES, tau, PK)

	//2.Logistics company generate a logistics order
	N, _ := rand.Int(rand.Reader, bn256.Order)
	code := Convert.StringToBigInt(order[0].OrderID + "||" + string(new(bn256.G1).ScalarBaseMult(N).Marshal()))
	SN := new(bn256.G1).ScalarMult(pkB1, N)
	auth5 := utils.Transact(client, privatekeyLogistics, big.NewInt(0)) // ⬅️ 发送 totalPrice wei
	tx5, _ := Contract.CreateLogisticsOrder(auth5, sellerAddr, buyerAddr, order[0].OrderID, code, Convert.G1ToG1Point(SN))
	receipt5, err := bind.WaitMined(context.Background(), client, tx5)
	if err != nil {
		log.Fatalf("Transaction mining failed: %v", err)
	}
	fmt.Printf("CreateLogisticsOrder GasUsed = %d\n", receipt5.GasUsed)

	// 3.Logistics site updates status
	auth6 := utils.Transact(client, privatekeyLogistics, big.NewInt(0)) // ⬅️ 发送 totalPrice wei
	tx6, _ := Contract.UpdateStatus(auth6, order[0].OrderID, "A3 Road")
	receipt6, err := bind.WaitMined(context.Background(), client, tx6)
	if err != nil {
		log.Fatalf("Transaction mining failed: %v", err)
	}
	fmt.Printf("UpdateStatus GasUsed = %d\n", receipt6.GasUsed)

	//4.Drone obtains own attribute key
	Su := map[string]bool{"Community_A": true, "Hovering_drone": true}
	var attributeSet []string
	for key, _ := range Su {
		attributeSet = append(attributeSet, key)
	}
	SK := OABE.KeyGen(pku, MSK, PK, attributeSet)

	//5.Drone decrypts the intermediate result to obtain delivery address
	IR := OABE.ODecrypt(Su, ABECT, SK, xsMap, PK) //外包解密
	_keyAES := OABE.Decrypt(IR, sku, ABECT)       //无人机解密
	_DelivAddr, err := AES.DecodeAndDecrypt(cipherAddr, _keyAES.Marshal())
	if err != nil {
		fmt.Println("解密失败:", err)
	}
	fmt.Printf("派件地址为: %s\n", string(_DelivAddr))

	//=======================================Confirm========================================//
	//1.Buyer obtains pickup code
	_SN, _ := Contract.GetSN(&bind.CallOpts{}, order[0].OrderID)
	fmt.Printf("加密随机数为：%v\n", _SN)
	_N := new(bn256.G1).ScalarMult(Convert.G1PointToG1(_SN), skB.ModInverse(skB, bn256.Order))

	//2.Buyer confirm receipt
	auth7 := utils.Transact(client, privatekeyBuyer, big.NewInt(0)) // ⬅️ 发送 totalPrice wei
	tx7, _ := Contract.BuyerConfirmWithCode(auth7, sellerAddr, order[0].OrderID, string(_N.Marshal()))
	receipt7, err := bind.WaitMined(context.Background(), client, tx7)
	if err != nil {
		log.Fatalf("Transaction mining failed: %v", err)
	}
	fmt.Printf("BuyerConfirmWithCode GasUsed = %d\n", receipt7.GasUsed)

	sellerBalance, _ := Contract.GetBalanceOf(&bind.CallOpts{}, sellerAddr)
	fmt.Printf("Seller balance:%v\n", sellerBalance)

	//3.Seller withdraw the payment
	auth8 := utils.Transact(client, privatekeySeller, big.NewInt(0)) // ⬅️ 发送 totalPrice wei
	tx8, _ := Contract.WithdrawPayment(auth8, buyerAddr, order[0].OrderID)
	receipt8, err := bind.WaitMined(context.Background(), client, tx8)
	if receipt8.Status != 1 {
		log.Fatalf("❌ 提现交易失败，链上回滚")
	}
	if err != nil {
		log.Fatalf("Transaction mining failed: %v", err)
	}
	fmt.Printf("WithdrawPayment GasUsed = %d\n", receipt8.GasUsed)

	parsedABI1, err := abi.JSON(strings.NewReader(contract.ContractABI))
	if err != nil {
		log.Fatalf("❌ ABI 解析失败: %v", err)
	}
	events, err := Event.GetPaymentEventsByOrderID(client, common.HexToAddress(address.Hex()), parsedABI1, order[0].OrderID)
	if err != nil {
		log.Fatalf("❌ 事件监听失败: %v", err)
	}
	if len(events) == 0 {
		fmt.Println("⚠️ 未监听到提现事件（SellerGetPayment），可能提现未成功或 orderID 不匹配")
	} else {
		for _, ev := range events {
			fmt.Printf("✅ 提现成功：订单 %v，卖家 %v，买家 %v，金额 %v wei\n",
				ev.OrderID, ev.Seller.Hex(), ev.Buyer.Hex(), ev.Payment.String())
		}
	}
}
